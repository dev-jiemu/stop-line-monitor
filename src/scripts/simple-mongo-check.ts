/**
 * Í∞ÑÎã®Ìïú MongoDB Ïó∞Í≤∞ Î∞è Ïª¨Î†âÏÖò ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const mongoose = require('mongoose');
const yaml = require('js-yaml');
const fs = require('fs');
const path = require('path');

// config.yamlÏóêÏÑú MongoDB URL Í∞ÄÏ†∏Ïò§Í∏∞
function getMongoUrl() {
    try {
        const configPath = path.join(process.cwd(), 'config', 'config.yaml');
        const yamlConfig = yaml.load(fs.readFileSync(configPath, 'utf8'));
        return yamlConfig.mongo.url;
    } catch (error) {
        console.error('‚ùå config.yaml ÌååÏùºÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', error);
        console.error('ÌôòÍ≤ΩÎ≥ÄÏàò MONGODB_URIÎ•º ÌôïÏù∏Ìï©ÎãàÎã§...');

        const mongoUri = process.env.MONGODB_URI || process.env.DATABASE_URL;
        if (!mongoUri) {
            throw new Error('MongoDB URLÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. config.yaml ÎòêÎäî ÌôòÍ≤ΩÎ≥ÄÏàò MONGODB_URIÎ•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.');
        }
        return mongoUri;
    }
}

async function simpleMongoCheck() {
    try {
        const mongoUrl = getMongoUrl();
        console.log('MongoDB Ïó∞Í≤∞ Ï§ë...');
        await mongoose.connect(mongoUrl);

        console.log('‚úÖ MongoDB Ïó∞Í≤∞ ÏÑ±Í≥µ!');

        // Ïª¨Î†âÏÖò Î™©Î°ù ÌôïÏù∏
        const db = mongoose.connection.db;
        const collections = await db.listCollections().toArray();

        console.log('\nüìä Ïª¨Î†âÏÖò Î™©Î°ù:');
        collections.forEach((collection, index) => {
            console.log(`  ${index + 1}. ${collection.name}`);
        });

        // Í∞Å Ïª¨Î†âÏÖòÏùò Îç∞Ïù¥ÌÑ∞ Í∞úÏàòÏôÄ ÏÉòÌîå ÌôïÏù∏
        console.log('\nüìà Ïª¨Î†âÏÖò ÏÉÅÏÑ∏ Ï†ïÎ≥¥:');
        for (const collection of collections) {
            const count = await db.collection(collection.name).countDocuments();
            console.log(`\n${collection.name}: ${count}Í∞ú`);

            if (count > 0) {
                // ÏµúÏã† Îç∞Ïù¥ÌÑ∞ 1Í∞ú Í∞ÄÏ†∏Ïò§Í∏∞
                const sample = await db.collection(collection.name)
                        .findOne({}, { sort: { _id: -1 } });

                console.log('  ÏµúÏã† Îç∞Ïù¥ÌÑ∞ ÏÉòÌîå:');
                if (sample.createdDt) {
                    console.log(`    createdDt: ${sample.createdDt}`);
                    console.log(`    createdDt (ISO): ${sample.createdDt.toISOString()}`);
                    console.log(`    createdDt (KST): ${sample.createdDt.toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}`);
                }
                if (sample.updatedDt) {
                    console.log(`    updatedDt: ${sample.updatedDt.toISOString()}`);
                }
                if (sample.eventId) {
                    console.log(`    eventId: ${sample.eventId}`);
                }
                if (sample.trackingKey) {
                    console.log(`    trackingKey: ${sample.trackingKey}`);
                }
            }
        }

        await mongoose.disconnect();
        console.log('\n‚úÖ ÌôïÏù∏ ÏôÑÎ£å');

    } catch (error) {
        console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    simpleMongoCheck().catch(console.error);
}

export { simpleMongoCheck };
